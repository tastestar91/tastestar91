// 2. 현실에서의 함수형 사고

// (1) 액션과 계산, 데이터

// 변경 가능성에 따라 코드 나누기

// 가장 위쪽에는 자주 바뀌는
// 중간 비뀔 수도 있지만 잘 바뀌지 않는 것
// 바뀌지 않는 배열이나 객체같은 언어 기능

// 계층형 설계

// (2) 일급 추상

['주문접수', '반죽만들기', '반죽펴기', '소스만들기', '소스뿌리기', '치즈갈기', '치즈뿌리기', '오븐에 넣기', '10분기다리기', '서빙']

// (3) 어려운 분산 시스템

// - 기본적으로 타임라인은 서로 순서를 맞추지 않습니다
// - 액션이 실행되는 시간은 중요하지 않습니다
// - 드물지만 타이밍이 어긋나는 경우는 실제 일어남
// - 타임라인 다이어그램으로 시스템의 문제를 알 수 있습니다.

// 커팅 적용

// - 타임라인 커팅으로 서로 다른 작업들을 쉽게 이해할 수 있음
// - 타임라인 다이어그램을 사용하면 시간에 따라 진행하는 작업을 쉽게 이해할 수 있음
// - 타임라인 다이어그램은 유연


// 함수형 프로그래머는 유지보수를 잘 하기 위해 계층형 설계를 사용

