// 기본형을 객체로 바꾸기

orders.filter(el => 'high' === o.priority || 'rush' === o.priority);
// =>
orders.filter(el => el.priority.higherThan(new Priortiy('normal')))

// 절차!
// 변수를 캡슐화
// 단순한 값 클래스를 만든다, 기존 값을 인수로 받아서 저장하고, 이 값을 반환하는 게터를 추가
// 정적 검사를 추가
// 값 클래스으 인스턴스를 새로 만들어서 필드에 저장하도록 세터를 수정, 이미 잇다면 필드의 타입을 적절히 변경
// 새로 만든 클래스의 게터를 호출한 결과를 반환하도록 게터를 수정
// 함수 이름을 바꾸면 원본 접근자의 동작을 더 잘 드러낼 수 있는지검토


class Order {
    constructor(data) {
        this.priority = data.priority
    }
}

// use
highPriorityCount = orders.filter(o => 'high' === o.priority || 'rush' === o.priority).length

//=> 변수부터 캡슐화

get priority() { return this._priority}
set priority() { this._priority = aString}

// => 우선순위 속성을 표현하는 값 클래스 Priority를 만듭니다. 이 클래스는 표현할 값을 받는 생성자와 그 값을 문자열로 받환하는 변환 함수로 구성
class Prioirty {
    constructor(value) { this._value = vale}
    toString() { return this._value}
}

// => Priority를 이용해서 접근자들을 수정
get priority() { this._priority.toString()}
set priority(aString) { this._priority = new Prioirty(aString)}

// => 함수 이름 바꿔주기 함수 선언 바꾸기