14. Stored Program

14.1 스토어드 프로그램의 장단점

14.1.1 스토어드 프로그램의 장점
- 데이터베이스 보안 향상 : 자체적인 보안 설정 기능을 가지고 있음, 프로그램 단위로 실행 권한 부여할 수 있음

- 기능의 추상화 : 일련번호 생성 규칙을 모르더라도 쉽게 활용할 수 있음

- 네트워크 소요 시간 절감 

- 절차적 기능 구현 

- 개발 업무의 구분 : 개발조직과 SQL 개발 조직이 구분돼있는 회사도 있음

14.1.2. 스토어드 프로그램의 단점

- 낮은 처리 성능 : MySQL 엔진에서 해석되고 실행
- 애플리케이션 코드의 조각화 

14.2 스토어드 프로그램의 문법

14.2.2 스토어드 프로시저
서로 데이터를 주고받아야하느 ㄴ여러 쿼리를 하나의 그룹으로 묶어서 독립적으로 실행하기 위해 사용하는 것
첫 번째 쿼리의 결과를 이용해 두 번쨰 쿼리를 실행해햐 할 떄가 대표적인 예

14.2.2.1 스토어드 프로시저 생성 및 삭제
CREATE PROCEDURE 명령으로 생성할 수 있음

- 스토어드 프로시저는 기본 반환값이 엄음, 값을 반환하는 RETURN 명령을 사용할 수 없음
- IN 타입으로 정의된 파라미터 입력 전용 파타미터를 의미, 외부에서 프로시저에 값을 전달하는 용도로 사용
- OUT 타입으로 정의된 파라미터 출력 전용 파라미터, 어떤 값을 전달하는 용도로 사용할 수 없음, 실행이 완료되면 외부 호출자로 결과 값을 전달하는 용도로 사용

14.2.2.2 스토어드 프로시저 실행

14.2.2.3 스토어드 프로시저의 커서 반환
스토어드 프로시저에서 쿼리의 결과 셋을 클라이언트로 전송하는 기능, 스토어드 프로시저의 디버깅 용도로 자주 사용

14.2.2.4 스토어드 프로시저 딕셔너리
스토어드 프로시저는 mysql 데이터베이스의 proc 테이블에 저장, information_schema, ROUTINES뷰를 통해 스토어드 프로시저의 정보를 조회할수 있음


14.2.3 스토어드 함수

14.2.3.1 스토어드 함수 생성 및 삭제
CREATE FUNCTION 명령으로 생성할 수 있고, 모든 입력 파라미터는 읽기 전용
정의부에 RETURNS 키워드를 ㅣ용해 반환되는 값의 타입을 명시

- 함수 정의부에 RETURNS로 반환되는 값의 타입을 명시
- 함수 본문 마지막에 정의부에 지정된 타입과 동일한 타입의 값을 RETURN 명령으로 반환

14.2.3.2 스토어드 함수 실행
스토어드 프롯저와 달리 CALL 명령으로 실행할 수 없음

14.2.4 트리거

테이블의 레코드가 저장되거나 변경될떄 미리 정의해둔 작업을 자동으로 실행해주는 스토어드 프로그램
데이터에 변화가 생길 때 다른 작업을 기동해주는 방아쇠

칼럼의 유효성 체크, 다른 테이블로의 복사나 백업, 계산된 결과를 다른 테이블과 함꼐 업데이트 하는 작업을 위해 트리거 자주 사용


14.2.4.1 트리거 생성
CREATE TRIGGER

- 트리거 이름 뒤에 'BEFORE DELETE' 트리거가 언제 실행될지 명시
AFTER 트리거는 대상 레코드의 내용이 변경된 후 실행

- 테이블명 뒤에 트리거가 실행될 단위를 명시


14.2.4.2 트리거 실행

14.2.4.3 트리거 딕셔너리
information_schema 데이터베이스의 TRIGGERS 뷰를 통해 조회할 수 있음

14.2.5 이벤트
스토어드 프로그램을 실행할 수 있는 스케줄러 기능을 '이벤트'라고함


14.2.5.1 이벤트 생성

# 일회성 이벤트
'ON SCHEDULE AT'절을 명시

# 반복성 이벤트


14.2.5.2 이벤트 실행 및 결과 확인

14.2.5.3 이벤트 딕셔너리
EVENTS 뷰를 통해 해당 이벤트가 반복인지 일회성인지, 언제 실행될지 ㅎ롹인할 수 있음

14.2.6 스토어드 프로그램 본문 작성

14.2.6.1 BEGIN..END 블록과 트랜잭션

스토어드 프로시저 내부에서 트랜잭션 완료하면 스토어드 프로시저를 호출한 애플리케이션이나 sql 클라이어느 도구에서는 트랜잭션을 조절할 수 없게 됨
스토어드 프로시저 내부에서 트랜잭션 완료할지, 프로시저를 호출하ㅡㄴ 애플리케이션이나 SQL 클라이언트 도구에서 트랜잭션 완료할지 명확히해야함

14.2.6.2 변수
스토어드 프로그램 로컬 변수

로컬 변수 DECLARE 명령으로 정의되고 반드시 타입이 명시돼야함
값을 할당하는 방법은 SET 또는 SELECT ... INTO ... 문장으로 가능

우선순위
1. DECLARE로 정의한 로컬 변수
2. 스토어드 프로그램의 입력 파라미터
3. 테이블의 칼럼


14.2.6.3 제어문

14.2.6.3.1 IF... ELSEIF .. ELSE ... END IF

14.2.6.3.2 CASE WHEN ... THEN ... ELSE ... END CASE

14.2.6.3.3 반복 루프
LOOP , REPEAT, WHILE 

14.2.6.4 핸들러와 컨티션을 이용한 에러 핸들링

14.2.6.4.1 SQLSTATE와 에러번호(Error No)

- ERROR-No : 4자리 숫자 값으로 구성된 에러코드, 1146 테이블이 존재하지않는다
- SQL-STATE : 다섯글자 알파벳과 숫자로 구성, 에러와 여러가지 상태를 의미하는 코드
'00' 정상처리 '01' 경고메세지 '02' Not found

14.2.6.4.2 핸들러

- SQLSTATE 스토어드 프로그램이 실행 도중 어떠 ㄴ이벤트가 발생했을 때 해당 이벤트의 SQLSTATE값이 일치할 떄 실행되는 핸들러를 정의할 때 사용
- SQLWARNING 스토어드프로그램에서 코드를 실행하던 주 ㅇ경고가 발생했을 때 실행되는 핸들러를 정의할 때 사용
- NOT FOUND 키워드는 SLELCTL 쿼리 문의 결과 건수가 1건도 없거나 CURSOR의 레코드를 마지막까지 읽은 뒤에 실행하는 핸들러 정의할 떄 사용
- SQLEXCEPTION은 경고와 NOT FOUND
- MySQL 에러 코드 값을 직접 명시할 떄도 있음, 어던 이벤트가 발생했을 때, SQLSTATE 값이 아닌 MySQL의 에러 번호 값을 비교해서 실해되는 핸들러를 정의할때 사용하는


14.2.6.4.3 컨디션

DECLARE condition_name CONDITION FOR condition_value

- condition_value에 MySQL의 에러 번호 사용할 때는 condition_valuedp MySQL의 에러 번호를 입력하면 됨
- condition_value에 SQLSTATE를 명시하는 경우, SQLSTATE 키워드를 입력하고 뒤에 SQLSTATE 값을 입력하면 됨

14.2.6.4.4 컨ㄷ션을 사용하는 핸들러정의

14.2.6.5 시그널을 이용한 예외 발생
MySQL의 스토어드 프로그램에서 사용자가 직접 예외나 에러를 발생시키려면 시그널 명령을 사용


14.2.6.5.1 스토어드 프로그램의 BEGIN .. END 블록에서 SIGNAL 사용

14.2.6.5.2 핸들러 코드에서 SIGNAL 사용
핸들러 스토어드 프로그램에서 에러나 에외에 대한 처리를 담당

14.2.6.6. 커서

- 샌서티브 커서 : 일체하는 레코드에 대한 정보를 실제 레코드의 포인터만으로 유지하는 형태, 커서를 사용해 칼럼의 데이터를 변경하거나 삭제하는게 가능

- 인센서티브 커서 : 일치하는 레코드를 별도의 임시 테이블로 복사해서 가지고 있는 형태, SELECT 쿼리에 부합되는 결과를 우선적으로 임시 테이블로 복사해야하기 떄문에 느림


14.3 스토어드 프로그램의 보안 옵션

14.3.1 DEFINER와 SQL SECURTY 옵션

14.4 스토어드 프로그램의 참고 및 주의사항

14.4.1 한글처리
14.4.2 스토어드 프로그램과 세션 변수
14.4.3 스토어드 프로시저와 재귀호출

14.4.4 중첩된 커서 사용