14. Stored Program

14.1 스토어드 프로그램의 장단점

14.1.1 스토어드 프로그램의 장점
- 데이터베이스 보안 향상 : 자체적인 보안 설정 기능을 가지고 있음, 프로그램 단위로 실행 권한 부여할 수 있음

- 기능의 추상화 : 일련번호 생성 규칙을 모르더라도 쉽게 활용할 수 있음

- 네트워크 소요 시간 절감 

- 절차적 기능 구현 

- 개발 업무의 구분 : 개발조직과 SQL 개발 조직이 구분돼있는 회사도 있음

14.1.2. 스토어드 프로그램의 단점

- 낮은 처리 성능 : MySQL 엔진에서 해석되고 실행
- 애플리케이션 코드의 조각화 

14.2 스토어드 프로그램의 문법

14.2.2 스토어드 프로시저
서로 데이터를 주고받아야하느 ㄴ여러 쿼리를 하나의 그룹으로 묶어서 독립적으로 실행하기 위해 사용하는 것
첫 번째 쿼리의 결과를 이용해 두 번쨰 쿼리를 실행해햐 할 떄가 대표적인 예

14.2.2.1 스토어드 프로시저 생성 및 삭제
CREATE PROCEDURE 명령으로 생성할 수 있음

- 스토어드 프로시저는 기본 반환값이 엄음, 값을 반환하는 RETURN 명령을 사용할 수 없음
- IN 타입으로 정의된 파라미터 입력 전용 파타미터를 의미, 외부에서 프로시저에 값을 전달하는 용도로 사용
- OUT 타입으로 정의된 파라미터 출력 전용 파라미터, 어떤 값을 전달하는 용도로 사용할 수 없음, 실행이 완료되면 외부 호출자로 결과 값을 전달하는 용도로 사용

14.2.2.2 스토어드 프로시저 실행

14.2.2.3 스토어드 프로시저의 커서 반환
스토어드 프로시저에서 쿼리의 결과 셋을 클라이언트로 전송하는 기능, 스토어드 프로시저의 디버깅 용도로 자주 사용

14.2.2.4 스토어드 프로시저 딕셔너리
스토어드 프로시저는 mysql 데이터베이스의 proc 테이블에 저장, information_schema, ROUTINES뷰를 통해 스토어드 프로시저의 정보를 조회할수 있음


14.2.3 스토어드 함수

14.2.3.1 스토어드 함수 생성 및 삭제
CREATE FUNCTION 명령으로 생성할 수 있고, 모든 입력 파라미터는 읽기 전용
정의부에 RETURNS 키워드를 ㅣ용해 반환되는 값의 타입을 명시

- 함수 정의부에 RETURNS로 반환되는 값의 타입을 명시
- 함수 본문 마지막에 정의부에 지정된 타입과 동일한 타입의 값을 RETURN 명령으로 반환

14.2.3.2 스토어드 함수 실행
스토어드 프롯저와 달리 CALL 명령으로 실행할 수 없음

14.2.4 트리거

테이블의 레코드가 저장되거나 변경될떄 미리 정의해둔 작업을 자동으로 실행해주는 스토어드 프로그램
데이터에 변화가 생길 때 다른 작업을 기동해주는 방아쇠

칼럼의 유효성 체크, 다른 테이블로의 복사나 백업, 계산된 결과를 다른 테이블과 함꼐 업데이트 하는 작업을 위해 트리거 자주 사용


14.2.4.1 트리거 생성
CREATE TRIGGER

- 트리거 이름 뒤에 'BEFORE DELETE' 트리거가 언제 실행될지 명시
AFTER 트리거는 대상 레코드의 내용이 변경된 후 실행

- 테이블명 뒤에 트리거가 실행될 단위를 명시


14.2.4.2 트리거 실행

14.2.4.3 트리거 딕셔너리
information_schema 데이터베이스의 TRIGGERS 뷰를 통해 조회할 수 있음

14.2.5 이벤트
스토어드 프로그램을 실행할 수 있는 스케줄러 기능을 '이벤트'라고함
