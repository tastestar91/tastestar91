17. InnoDB Cluster

17.1 InnoDB 클러스터 아키텍처
- 그룹복제 : 소스 서버의 데이터를 레플리카 서버로 동기화하는 기본적인 복제 역할 뿐만 아니라 복제에 참여하는 MySQL 서버들에 대한 자동화된 멤버쉽 관리 역할을 담당
- MySQL 라우터 : 애플리케이션 실행한 쿼리를 적절한 MySQL 서버로 전달하는 프락시 역할을 함
- MySQL 셀 : 어드민 작업을 할 수 있게하는 API를 제공

전부 수동으로 장애 복구 처리르르 해야했던 부분들이 InnoDB 클러스터에서는 모두 자동으로 처리, 
공식적으로 제공하는 빌트인 HA 솔루션

17.2 그룹 복제
Row포맷 바이너리 로그와 릴레이 로크, GTID를 사용
그룹복제는 반동기 방식, 
트랜잭션 커밋을 처리할 때, 그룹의 다른 멤버들에 대한 응답을 확인하는 과정을 '합의'라고 함

- 그룹 멤버관리
- 그룹 단위의 정렬된 트랜잭션 적용 및 트랜잭션 충돌감지
- 자동 페일오버
- 자동 분산 복구

17.2.1 그룹 복제 아키텍처
그룹복제로 구성할 서버수를 결정

17.2.2 그룹 복제 모드

17.2.2.1 싱글 프라이머리 모드
그룹내에서 쓰기를 처리할 수 있는 프라이머리 서버가 한 대만 존재하는 형태

- MySQL 서버 버전
- 각 멤버의 가중치 값
- UUID 값의 사전식 순서

'SELECT MEMBER_HOST, MEMBER_ROLE FROM performance_schema, replication_group_members;'

17.2.2.2 멀티 프라이머리 모드

그룹 멤버들이 전부 프라이머리로 동작하는 형태

17.2.3 그룹 멤버 관리
'SELECT * FROM performance_schema, replication_group_members

17.2.4 그룹 복제에서의 트랜잭션 처리

- 합의 , 인증 을 거친 후 그룹의 각 서버들에게 적용

17.2.4.1 트랜잭션 일관성 수준
group_replication_consistency 시스템 변수를 통해 그룹 복제에서의 트랜잭션 일관성 수준을 설정할 수있음

17.2.4.1.1 Eventual 일관성 수준

17.2.4.1.2 BEFORE_ON_PRIMARY_FAILOVEER 일관성 수준
싱글 프라이머리 모드로 설정된 그룹 복제에서 프라이머리 페일 오버가 발생해서 신규 프라이머리가 선출됐을 때만 트랜잭션에 영향을 미침

- 신규 프라이머리로 유입된 읽기 전용 및 읽기-쓰기 트랜잭션들은 오래된 데이터가 아닌 최신 데이터를 바탕으로 동작
- 신규 프라이머리로 유입된 읽기-쓰기 트랜잭션은 적용 대기 중인 이전 프라이머리의 트랜잭션과의 충돌로 롤백될 수 있음, 이걸하면 충돌하지않게 됨

17.2.4.1.3 BEFORE 일관성 수준
모든 선형 트랜잭션이 완료될 때까지 대기 후 처리

17.2.4.1.4 AFTER 일관성 수준
트랜잭션이 적용되면 해당 시점에 그룹 멤퍼들이 모두 동기화된 데이터를 갖게함

17.2.4.1..5 BEFORE_AND_AFTER 일관성 수준
before과 after 가 결합된 형태

17.2.4.2 흐름제어(Flow Control)

group_replication_flow_control_mode  시스템 변수를 통해 멤버에서 흐름 제어 기능의 사용 여부 설정할 수 있음

QUOTA 모드
- 1. 모든 그룹 멤버들ㄹ의 쓰기 처리량 및 처리 대기 중인 트랜잭션에 대한 통계를 수집해서 멤버의 처리량을 조절할 필요가 있는 지 확인
- 2. 처리량 조절이 필요한 경우 수집된 통계 데이터를 바탕으로 멤버에게 할당할 쓰기 처리량을 계산한 후 멤버가 게산된 최대 쓰기 처리량을 넘어 쓰기를 처리하지앟도록 멤버의 쓰기 처리를 제한

- 인증 큐 크기, 적용 큐 크기, 인증된 총 트랜잭션 수, 적용된 원격 트랜잭션 수, 로컬 트랜잭션 수


17.2.5 그룹 복제의 자동 장애 감지 및 대응

17.2.6 그룹 복제의 분산 도구
다른 그룹 멤버들과동일한 최신 데이터를 가질 수 있도록 가입 멤버에서 누락된 트랜잭션들을 다른 그룹멤버에서 가져와
적용하는 복구 프로세스르르 자동으로 수행, 이를 '분산 복구'라고함

17.2.6.1 분산 복구 방식
미처 적용되지 못하고 남아있는 트랜잭션이 있는지 확인하고 발견되는 경우 이를 먼저 쩍용하는 것으ㅗ 복구 작업을 시작

- 바이너리 로그 복제 방식
- 원격 클론 방식

17.2.6.2 분산 복구 프로세스르르
- 로컬 복구 : 가입 멤버가 이전에 그룹에 가입한 적이 있는 경우 릴레이 로그에 미처 적용하지 못한 트랜잭션이 존재할 수 있음

- 글로벌 복구 : 가입 멤버는 그룹의 기존 멤버들에서 기증자 역할을 할 멤버를 선택해서 해당 멤버로부터 데이터 또는 누락된 트랜잭션들을 가져와 자신에게 적용
 
- 캐시 트랜잭션 적용 : 클로벌 복구 단계가 완료되면 캐싱해서 보관하고 있떤 트랜잭션들을 적용해 최종적으로 그룹에 참여


17.2.6.3 분산 복구 설정

- 연결 시도 횟수
- 연결 시도 간격
- 가입한 멤버를 온라인 상태로 표기하는 시점

17.2.6.4 분산 복구 오류 처리량
- 기증자로 선택한 그룹 멤버로의 연결이 인증 문제 등으로 인해 정상적으로 이뤄지지않은 경우
- 바이너리 로그 복제 방식으로 복구 작업을 진행하는 중에 레플리케이션 I/O 스레드 또는 SQL 스레드에서 에러가 발생한 경우
- 원격 클론 작어비 실패하거나 혹은 완료되기 전에 중단한 경우
- 복구 작업 동안 기증자 멤버에서 그룹복제가 중단된 경우


17.2.7 그룹 복제 요구사항
- InnoDB 스토리지 엔진 사용
데이터가 저장되는 테이블은 반드시 InnoDB 스토리지 엔진을 사용해야함, 

17.2.8 그룹 복제 제약 사항


17.3 MySQL 셸
- session : 셸에서 MySQL 서버에 연결했을 때 생성된 세션에 매핑되는 객체로, 트랜잭션 시작과 같이 세션 단위에서 사용할 수 있는 기능 제공

- dba : InnoDB클러스터 및 InnoDB 레플리카셋 구축과 관련된 기능 제공, 내부적으로 AdminAPI를 사용해 처리량

- cluster : InnoDB 클러스터에 매핑되는 객체로, 클러스터 설정 변경등과 같이 클러스터와 가ㅗㄴ련해 사용자가 제어할 수 있는 기능 제공


17.4 MySQL 라우터
프락시 역할을 수행

- InnoDB 클러스터의 MySQL 구성 변경 자동 감지
- 쿼리 부하 분산
- 자동 페일 오버

17.5 InnoDB 클러스터 구축

17.5.1 InnoDB 클러스터 요구사항
17.5.2 InnoDB 클러스터 생성


17.5.2.1 사전 준비

17.5.2.2 InnoDB 클러스터 생성
dba.createCluster()
InnoDB 클러스터는 기본적으로 싱글 프라이머리 모드로 생성

17.5.2.3 InnoDB 클러스터 인스턴스 추가ㄴ

클러스터에 있는 기존 서버와 데이터 동기화가 필요한지를 파단
데이터 동기화가 필요한 경우, 그룹 복제의 분산 복구를 수행, 

17.5.2.4 MySQL 라우터 설정

메타 데이터 캐시 플러그인 : 라우터에 접속할 InnoDB 클러스터의 정보를 구성하고 관리하는 부분을 담당
커넥션 라우팅 플로그인 : 애플리케이션 서버로부터 유입된 쿼리 요청을 InnoDB 클러스터로 전달하는 부분을 담당

17.6 InnoDB 클러스터 모니터링
'cluster.describe()'

17.7 InnoDB 클러스터 작업

17.7.1 클러스터 모드 변경
17.7.2 프라이머리 변경
17.7.3 인스턴스 제거
17.7.4 클러스터 해체
17.7.5 클러스터 및 인스턴스 설정 변경

17.7.5.1 빌트인 태그

17.8 InnoDB 클러스터 트러블 슈팅
17.8.1 클러스터 인스턴스 장애
최종적으로 응답이 없는 인스턴스를 클라서틔 그룹 복제에서 내보냄


17.8.2 클러스터의 정족수 손실

17.9 InnoDB 클러스터 버전 업그레이드
1.MySQL 라우터 업그레이드
2.MySQL 셀 및 InnoDB 클러스터 메타데이터 스키마 업그레이드
3.MySQL 인스턴스 업그레이드

17.10 InnoDB 클러스터 제약 사항


