12 장 데이터시스템의 미래

# 1. 데이터 통합


## (1) 파생 데이터에 특화된 도구의 결함

### A. 데이터플로에 대한 추론

모든 쓰기의 순서를 결정하는 단일 시템으로 모든 사용자 입력을 밀어넣을 수 있다면 쓰기를 같은 순서로 처리해 데이터를 다른 표현형으로 파생하기가 훨씬 쉬워짐

### B. 파생 데이터 대 분산 트랜잭션

트랜잭션 시스템은 선형성을 지원, 자신이 쓴 내용 읽기 같은 유용한 기능을 보장해줌
파셍 데이터 시스템 비동기로 갱신, 동기간 갱신 보장을 하지않음

### C. 전체 순서화의 제약

- 대 부분의 경우, 전체 순서가 정해진 로그를 구축할 때, 순서를 결정하려면 모든 이벤트가 단일 리더 노드를 통해야함
=> 단일 장비에서 처히라 수 있는 양보다 커지면 복수의 장비로 파티셔닝 해결해야함

- 특정 데이터센터 전체가 오프라인 상태가 되는 것에 대처하기위해 서버가 지역적으로 분산된 여러 데이터센터에 걸쳐있다면 각 데이터센터에 독립적인 리더를 둠

- 애플리케이션을 마이크로 서비스로 배포 갖ㅇ, 각 서비스와 서비스의 지속적인 관련 상태 정보를 독립된 단위로 배포하고 지속적인 상태느 ㄴ서비스 간에 공유하지 않는 것

- 클라이언트 측 상태르 ㄹ유지하고 사용자 입력이 들어올 때마다 서버의 확인 응답을 기다리지않고 바로 갱신

이벤트의 전체 순서를 결정하는 걸, 전체 순서 브로드캐스트라고함


### D. 인과성 획득을 위한 이벤트 순서화
- 논리적 타임스탬프를 사용하면 코디네이션 없이 전체 순서화를 지원 할 수 있기 때문에 전체 순서 브로드캐스트를 쓸 수 없는 환경에서는 도움이 될지 모름

- 사용자가 결정을 내리기 전에 사용자가 본 시스템 상태를 기록하는 이벤트를 로깅할 수 있고 해당 이벤트에 고유 식별자를 부여할 수 있다면 이후 이벤트는 인과적의존성을 기록하기 위한 이벤트 식별자를 참조할 수 있따

- 충돌 해소 알고리즘은 예상치 못한 순서로 전송된 이벤트를 처리하는데 도움을 줌, 


## (2) 일괄 처리와 스트림 처리


데이터 통합의 목표는 데이터를 올바른 장소에 올바른 형태로 두는 것

일괄 처리와 스트림 처리의 출력은 파생 데이터셋, 
스트림 처리는 끝이없는 데이터셋 상에서 운영되는 반면 일괄 처리는 유한한 크기의 입력을 사용한다는 것

### A.파생상태 유지
일괄 처리는 결정적이고 출력이 입력에만 의존하며 명시적 출력 외에는 다른 부수 효과가 없는 순수함수를 장려하며 입력을 불변으로 간주하고 출력은 추가 전ㅇ용으로만 사용

### B. 애플리케이션 발전을 위한 데이터 재처리
파생 데이터를 유지할 때 일괄 처리와 스트림 처리 모두 유용
파새애 뷰를 사용하면 점진적 발전이 가능, 

### C. 람다 아키텍처
입력 데이터를 불변 이벤트로서 증가, 데이터셋에 추가하는 방식으로 기록해야한다는 것으로 이벤트 소싱과 유사

두 개의 다른 시스템을 병행해서 운용하기를 제안

- 일괄 처리와 스트림 처리 양쪽 프레임워크에서 같은 로직을 유지해야하는 데 상당히 노력 필요
- 스트림 파이프라인과 일괄 처리 파이프라인은 분리된 출력을 생성하기 때문에 사용자 요청에 대응하기 위해 출력을 병합해야함
두 출력을 병합하는 건 텀블링 윈도를 사용하는 간단한 집계 연산 경우 어렵지않음

- 전체 과거 데이터를 재처리할 수 있다는 점은 훌륭, 모든 데이터처리를 재처리하기보다 증분으로 일괄처리 

### D. 일괄 처리와 스트림 처리의 통합
- 최근 이벤트 스트림을 다루는 처리 엔진에서 과거 이벤트를 재생하느 ㄴ능력, 로그 기반 메시지 브로커는 메세지를 재생하느 능력
- 스트림 처리자에서 사용되는 정확히 한 번 시맨틱, 실제로 결함이 발생하더라도 결함이 없었던 상황과 동일한 출력을 내는 걸 보장
-  이벤트 시간 기준으로 윈도우를 처리하느 ㄴ도구, 과ㅓㄱ 이벤트를 처리할 때 처리 시간은 의미가 없기 떄문

# 2. 데이터베이스 언번들링

## (1) 데이터 저장소 기술 구성하기

- 보조색인은 필드 값을 기반으로 레코드를 효율적으로 검색할 수 있는 기능
- 구체화 뷰는 질으 ㅣ결과를 미리 연산한 캐시의 일종
- 복제 로그는 데이터의 복사본을 다른 노드에 최신 상태로 유지하는 기능
- 전문 검색 색인은 텍스트에서 키워드 검색을 가능하게 하는 기능으로 일부 관계형 데이터베이스는 이 기능을 내장

### A. 색인 생성'

### B. 모든 것의 메타데이터베이스

- 연합 데이터베이스 : 읽기를 통합
외래 데이터 랩퍼, 

- 언번들링 데이터베이스 : 쓰기를 통합
연합 데이터베이스느 다른 여러 시스템을 읽기 전용으로 질의하는 문제를 해결하지만 여러 시스템에 걸친 쓰기르 ㄹ동기화하기에느 ㄴ적합하지안흔 ㄴ해결책,

#### a. 언번들링 동작하게 만들기

여러 저장 시스템에 적용되는 쓰기를 동기화하는건 어려운 엔지니어링 문제가

쓰기를 동기화하는 전통적 접근법은 이종 저장소 시스템 간 분산 트랜잭션이 필요
-=> 잘못
비동기 이벤트 로그를 사용하는편 훨씬더 강력

- 시스템 수준에서 비동기 이벤트 스트림을 사용하면 전체 시스템이 개별 구성 요소의 장애나 성능 저하가 생겨도 잘 견디게 만들 수 있음

- 인적 수준에서 데이터 시스템을 언번들링하면 소프트웨어 구성요소와 서비스를 다른 팀에서 각자 개발하고 개선하고 독립적으로 유지보수 할 수 있다

#### b. 언번들링 대 통합 시스템

언번들링의 목표는 특정 작업 부하에 대한 성능 측면에서 개별 데이터베이스와 경쟁하는게 아니라, 
몇개의 다른 뎅터베이스를 결합해 단일 소프트웨어로 가능한 것보다 더 넓은 범위의 작업부하에 대해 좋은 성능 달성하기 위함

#### c. 뭐가 빠졌지?
미분 데이터플로

### C. 데이터 플로 주변 애플리케이션 설계

언번들링 데이터베이스 접근법은 , 데이터베이스 인사이드아웃 접근법이라고도함

#### a. 파생 함수로서의 애플리케이션 코드

- 보조 색인은 단순한 변환 함수를 사용하는 파생 데이터셋의 일종이다, 게반 테이블의 각 로우나 문서마다 색인할 칼럼이나 필드를 골라 그 값을 기준으로 정렬
- 전문 검색 색인은 언어 감지, 단어 분리, 어간 추출, 기본형 처리, 철자교정, 동의어 식별등의 다양한 자연어 처리 함수를 적용한 다음 효츌적인 조회를 위한 자료 궂호를 구축
- 머신러닝 시스템에서 모델은 다양한 특징 추출과 통계 분석함수를 사용해 학습데이터로부터 파생된 것으로 간주할 수 있음
- 캐시는 흔히 사용자 인터페이스에 보여줄 혀애의 데이터 집합을 포함, 캐시를 채우려면 ui에 참조되는 필드가 무엇인지 지식이 필요

#### b. 애플리케이션 코드와 상태의 분리
웹 애플레케이션이 상태 비저장 서비스로 배포, 상태 관리와 상태 비저장 애플리케이션 로직을 분리


#### c. 데이터플로 : 상태변경과 애플리케이션 코드 간 상호작용
- 파생 데이터를 유지할 때 상태 변경 순서가 중요할 떄가 있음, 
- 내결함성은 파생 데이터의 핵심, 메시지 하나를 잃는 것만으로 파생 데이터셋이 영구적으로 데이터 원본과 동기화가 깨짐
메시지 전달과 파생 상태 갱신 양쪽 모두 반드시 신뢰성이 있어야함

#### d. 스트림 처리자와 서비스 
마이크로 서비스 접근법 동기식 요청/응답 상호작용을 사용하지만 스트림 연산자로 구성한 시스템은 단방향 비동기식 메시지 스트림으 사용

1. 마이크로섭스 접근법에서 구매 처리코드는 아마도 특정 동화의 현재 환율을 얻기 위해 환율 서비스나 데이터베이스에 질의
2. 데이터플로 접근법에서 구매 처리코드는 미리 환율 갱신 스트림을 구독하고 환율이 바뀔때마다 로컬 데이터베이스에 환율을 기록, 

### D. 파생상태 관찰

검색 색인이나 구체화 뷰 또는 예측 모델과 같은 파생 데이터셋을 생성하고 최신 상태로 유지하는 과정에 사용할 수 있음
=> 쓰기 경로

파생 데이터셋을 왜 생성? -다시 질의할 가능성 크기 때문 읽기 경로

#### a. 구체화 뷰와 캐싱
쓰기 경로는 색인을 갱신, 읽기 경로는 색인으 ㄹ사용해 키워드를 찾음

공통 질의 중 하나의 결과에 포함해야 하는 새문서가 나타날 때 갱신돼야하기 때문, 공통 질의 캐시라고 부름

#### b. 오프라인 대응 가능한 상태 저장 클라이언트 

#### c. 상태 변경을 클라이언트에ㅔㄱ 푸시하기

#### d. 종단 간 이벤트 스트링

#### e. 읽기도 이벤트
스트림 처리자가 파생 데이터를 저장소에 ㄱ록할 때 사용자가 저장소에 질의 요청을 할 때 해당 저장소가 읽기 경로와 쓰기 경로 사이의 경계로 작동한다고 설명

쓰기와 읽기 모두 이벤트로 표현, 이벤트 처리를 위해 같은 스트림 연산자로 라우팅하는 것은 사실상 읽기 질의 스트림과 데이터베이스 
사이의 스트림 테이블 조인 수행과 동일

### E. 다중 파티션 데이터 처리는


# 3. 정확성을 목표로

## (1) 데이터베이스에 관하 ㄴ종단 간 논증

### A. 연산자의 정확히 한 번 실행

효과적인 방법 중 하나는 연산을 멱등으로 만듬
연산을 한 번 실행하든 여러 번 실행하든 관계없이 같은 효과가 나타남을 보장한다는 뜻

#### a. 중복 억제
TCP 스택은 애플리케이션으로 데이터를 전달하기 전에 잃어버린 패킷을 재 전송하고 중복 패킷을 제거

#### b. 연산 식별자
연산의 고유 식별자를 만들어 클라이언트 애플리케이션 내 숨은 폼 필드에 포함하거나 유효한 모든 폼 필드의 해시값을 계산해서 연산 ID를 만들 수 있음

### B. 종단 간 논증

트랜잭션 억제 시나리오는 종단 간 논증이라 부르는, 일반적 원리의 한 예

종단 간 논증은 데이터 무결성 검사에도 적용할 수 있다, 

### C. 종단 간 사고를 데이터 시스템에 적용하기


## (2) 제약 조건 강제하기

### A. 유일성 제약 조건은 합의가 필요

### B. 로그 기반 메시징의 유일성
 - 1. 모든 사용자명 요청은 메시지로 부호화해 사용자명의 해시값으로 결정된 파티션에 추가
 - 2. 스트림 처리자는 로그에서 요청을 연속해ㅓㅅ 읽고 로컬 데이터베이스를 이용해 어떤 사용자명을 사용했는지 추적
    사용할 수 있는 사용자명의 모든 요청마다 해당 이름을 기록하고 성공 메세지를 출력 스트림에 방출
    이미 누군가 쓰고 있는 사용자명을 요청한다면 거부 메세지르 ㄹ출력 스트림에 방출

 - 3. 사용자명을 요청한 클라이언트는 출력 스트림을 보면서 보낸 요청에 해당하는 성공 또는 거부 메세지가 오기를 기다림

### C. 다중 파티션 요청 처리

### (3) 적시성과 무결성
트랜잭션은 선형성, 다중 단계로 스트림 처리자를 거쳐 연산을 언번들링하는 경우 다름

- 적시성 : 사용자가 시스템을 항상 최신 상태로 관측 가능하다는 의미, 사용자가 데이터의 뒤처진 복사본을 읽는다면 일관성이 없는 상태의 데이터를 관측할 가능성이 있음

- 무결성 : 손상이 없다는 의미, 누락된 데이터도 없고 모순된 데이터도, 잘못된 데이터도 없다
무결성으 ㄹ위반하면 불일치가 영원히 지속, 

직시성 위반은 '최종적 일관성', 무결성 위반은 '영구적 불일치'

#### A. 데이터플로 시스템의 정확성
ACID 트랜잭션 적시성과 무결성 양쪽 모두 보장함

신뢰성있는 스트림 처리 시스템은 무결성을 보존할 수 있음

- 쓰기 연산 내용을 단일 메세지로 표현, 단일 메세지는 원자적으로 기록하기 쉽고 이벤트 소싱과 매우 잘 맞는 접근법
- 결정적 파생 함수를 사용해 해당 단일 메세지에서 모든 상태 갱신을 파생하기, 파생함수는 스토어드 프로시저와 비슷
- 클라이언트가 생성한 요청 ID를 모든 처리 단계를 통해 전달하기, 이 방법을 사용하면 종단 간 중복 억제와 멱등성이 가능
- 메시지를 불변으로 만들고 필요 시 파생 데이터 재처리하기, 버그에서 회복하기 쉬워짐

#### B. 느슨하게 해석되는 제약조건
- 보상 트랜잭션

#### C. 코디네이션 회피 데이터 시스템
- 데이터플로 시스템은 원자적 커밋과 선형성, 파티션에 걸친 동기 코디네이션 없어도 파생 데이터에 대한 무결성을 보장 유지할 수 있다
- 엄격한 유일성 제약 조건은 적시성과 코디네이션을 요구하지만 많은 애플리케이션은 느슨한 제약 조건을 사용해도 실제로 ㄱ핸찮음

### (4) 믿어라, 하지만 확인하라

### A. 소프트웨어 버그가 발생해도 무결성 유지하기

#### a. 약속을 맹목적으로 믿지마라

데이터 무결성을 체크하는 작업을 감사(auditing)이라고 함

### B. 검증하는 문화
자가 검증이나 자가 감사 시스템

#### a. 감사 기능 설계
데이터 플로를 명시적으로 만들면 데이터의 유래가 더욱 명확해져 무결성 확인이 좀 더 수월해짐
이벤트 로그의 경우 이벤트 저장소가 손상됐는지 확인하기 위해 해시를 사용할 수 있음

#### b. 다시 종단 간 논증
시스템의 모든 개별 구성 요소가 절대로 손상되지 않는다
데이터 시스템의 무결성을 확인하는 방법은 종단 간 방식이 최선

#### c. 감사 데이터 시스템용 도구

암호화 도구를 사용해 시스템의 무결성을 증명하려는 시도

### (5) 옳은 일 하기

#### A. 예측 분석

##### a. 편견과 차별
##### b. 책임과 의무
##### c. 피드백 루프

#### B. 사생활과 추적

##### a.감시
감시 중심 애플리케이션 설계, 

##### b.동의와 선택의 자유

##### c. 사생활과 데이터 사용
##### d. 자산과 권력으로서의 데이터
##### e. 산업 혁명의 기억
##### f. 법률과 자기 규제

