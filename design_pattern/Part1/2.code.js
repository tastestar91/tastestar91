샤딩 : 데이터셋이 매우 크거나 질의 처리량이 매우 높다면 복제만으로 부족하고 데이터를 파티션으로 쪼갤 필요가 있음

## 파티셔닝과 복제

## 키-값 데이터 파티셔닝

파티셔닝의 목적 : 데이터와 질의 부하를 노드 사이에 고르게 분산시키는 것

핫스팟 : 불균형하게 부하가 높은 파티션으로

## 키 범위 기준 파티셔닝

데이터를 저장하는 애플리케이션에서 측정값의 타임스탬프를 키로 사용한다고 하면, 범위 스캔이 유용
특정 접근 패턴이 핫스팟을 유발하는 단점


## 키의 해시값 기준 파티셔닝
키의 파티션을 정하는데 해시 함수를 사용
파티션 경계는 크기가 동일하도록 나눌 수 있고 무작위 가깝게 선택할 수 있음( 일관성 해싱)
=> 그러나 범위 질의르 ㄹ효율적으로 실행할 수 있는 능력을 잃어버림

## 쏠진 작업부하와 핫스팟 완화

## 2.파티셔닝ㄱ와 보조색인
보조색인 : 레코드를 유일하게 식별한느 용도가 아니라 특정한 값이 발생한 항목을 검색하는 수단

### 문서 기준 보조 색인 파티셔닝
문서 파티셔닝 색인은 전역색인, 지역 색인이라고도 함(global index, local index)

스캐터/개더 : 모든 파티션으로 질의를 보내서 얻은 결과를 모두 보아야함

### 용어 기준 보조 색인 파티셔닝

전역 색인은 쓰기가 느리고 복잡, 비동기로 갱신
모든 파티션의 데이터를 담당하는 전역 색인

## 3. 파티션 재균형화

재균형화 : 클러스터에서 한 노드가 담당하던 부하를 다른노드로 옮기는 과정 

    - 재균형화 후, 부하가 클러스터 내에 있는 노드들 사이에 균등하게 분배해야된다
    - 재균형화 도중에도 데이터베이스 읽기 쓰기 요청을 받아들여야한다
    - 재균형화가 빨라 실행되고 네트워크와 디스크 I/O부하를 최소화할 수 있도록 노드들 사이에 데이터가 필요 이상으로 옮겨져서는 안된다


### (1) 쓰면 안되는 방법 : 해시값에 모드 N 연산을 실행
키가 자주 이동하면 재균형화 비용이 지나치게 커짐

### (2) 파티션 개수 고정
파티션을 노드 대수보다 많이 만들고 각 노드에 여러 파티션을 할당하는 것

### (3) 동적 파티셔닝
파티션 크기가 설정된 값을 넘어서면 파티션을 두 개로쪼개 각각에 원래 파티션의 절반 정도에 데이터가 포함되게 한다

사전 분할 

### (4) 노드 비례 파티셔닝
파티션 개수가 노드 대수에 비례하게하는 것, 노드당 할당되는 파티션 개수를 고정
새노드가 클러스터에 추가되면 고정된 개수의 파티션을 무작위로 선택해서 분할하고 각 분할된 파티션의 절반은 그대로 두고 새노드에 할당합니다.

### (5) 운영: 자동 재균형화와 수동 재균형화

## 4. 요청 라우팅
서비스 찾기

1. 클라이언트가 아무 노드에 접속하게 한다, 만약 해당 노드에 마침 요청을 적용할 파티션이 있다면 요청 직접 처리할 수 있음
그렇지않으면 요청을 올바른 노드로 전달해서 응답을 받고 클라이언트에게 응답 전달
2. 클라이언트의 모든 요청을 라우팅계층으로 먼저 보냄, 라우팅 계층에서는 각 요청을 처리할 노드를 알아내고 그에 따라 해당 노드로 요쳥을 전달
3. 클라이언트가 파티셔닝 방법과 파티션이 어떤 노드에 할당됐는지 알고있게함

분산 시스템은 주키퍼 같은 별도의 코디네이션 서비스를 사용

## 5. 병렬 질의 실행
대규모 병렬 처리 => 10장

